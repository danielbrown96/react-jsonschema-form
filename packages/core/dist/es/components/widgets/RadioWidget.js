import React from "react";
import PropTypes from "prop-types";

function RadioWidget(props) {
  var options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      autofocus = props.autofocus,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      _onChange = props.onChange,
      id = props.id; // Generating a unique field name to identify this set of radio buttons

  var name = Math.random().toString();
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline; // checked={checked} has been moved above name={name}, As mentioned in #349;
  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.

  return React.createElement("div", {
    className: "field-radio-group",
    id: id
  }, enumOptions.map(function (option, i) {
    var checked = option.value === value;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
    var radio = React.createElement("span", null, React.createElement("input", {
      type: "radio",
      checked: checked,
      name: name,
      required: required,
      value: option.value,
      disabled: disabled || itemDisabled || readonly,
      autoFocus: autofocus && i === 0,
      onChange: function onChange(_) {
        return _onChange(option.value);
      },
      onBlur: onBlur && function (event) {
        return onBlur(id, event.target.value);
      },
      onFocus: onFocus && function (event) {
        return onFocus(id, event.target.value);
      }
    }), React.createElement("span", null, option.label));
    return inline ? React.createElement("label", {
      key: i,
      className: "radio-inline ".concat(disabledCls)
    }, radio) : React.createElement("div", {
      key: i,
      className: "radio ".concat(disabledCls)
    }, React.createElement("label", null, radio));
  }));
}

RadioWidget.defaultProps = {
  autofocus: false
};

if (process.env.NODE_ENV !== "production") {
  RadioWidget.propTypes = {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    options: PropTypes.shape({
      enumOptions: PropTypes.array,
      inline: PropTypes.bool
    }).isRequired,
    value: PropTypes.any,
    required: PropTypes.bool,
    disabled: PropTypes.bool,
    readonly: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func
  };
}

export default RadioWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3dpZGdldHMvUmFkaW9XaWRnZXQuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJSYWRpb1dpZGdldCIsInByb3BzIiwib3B0aW9ucyIsInZhbHVlIiwicmVxdWlyZWQiLCJkaXNhYmxlZCIsInJlYWRvbmx5IiwiYXV0b2ZvY3VzIiwib25CbHVyIiwib25Gb2N1cyIsIm9uQ2hhbmdlIiwiaWQiLCJuYW1lIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwiZW51bU9wdGlvbnMiLCJlbnVtRGlzYWJsZWQiLCJpbmxpbmUiLCJtYXAiLCJvcHRpb24iLCJpIiwiY2hlY2tlZCIsIml0ZW1EaXNhYmxlZCIsImluZGV4T2YiLCJkaXNhYmxlZENscyIsInJhZGlvIiwiXyIsImV2ZW50IiwidGFyZ2V0IiwibGFiZWwiLCJkZWZhdWx0UHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJzY2hlbWEiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwic3RyaW5nIiwic2hhcGUiLCJhcnJheSIsImJvb2wiLCJhbnkiLCJmdW5jIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0Qjs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUFBLE1BRXhCQyxPQUZ3QixHQVl0QkQsS0Fac0IsQ0FFeEJDLE9BRndCO0FBQUEsTUFHeEJDLEtBSHdCLEdBWXRCRixLQVpzQixDQUd4QkUsS0FId0I7QUFBQSxNQUl4QkMsUUFKd0IsR0FZdEJILEtBWnNCLENBSXhCRyxRQUp3QjtBQUFBLE1BS3hCQyxRQUx3QixHQVl0QkosS0Fac0IsQ0FLeEJJLFFBTHdCO0FBQUEsTUFNeEJDLFFBTndCLEdBWXRCTCxLQVpzQixDQU14QkssUUFOd0I7QUFBQSxNQU94QkMsU0FQd0IsR0FZdEJOLEtBWnNCLENBT3hCTSxTQVB3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REg7QUFFdEIzQixJQUFBQSxFQUFFLEVBQUVaLFNBQVMsQ0FBQ3dDLE1BQVYsQ0FBaUJELFVBRkM7QUFHdEJwQyxJQUFBQSxPQUFPLEVBQUVILFNBQVMsQ0FBQ3lDLEtBQVYsQ0FBZ0I7QUFDdkJ4QixNQUFBQSxXQUFXLEVBQUVqQixTQUFTLENBQUMwQyxLQURBO0FBRXZCdkIsTUFBQUEsTUFBTSxFQUFFbkIsU0FBUyxDQUFDMkM7QUFGSyxLQUFoQixFQUdOSixVQU5tQjtBQU90Qm5DLElBQUFBLEtBQUssRUFBRUosU0FBUyxDQUFDNEMsR0FQSztBQVF0QnZDLElBQUFBLFFBQVEsRUFBRUwsU0FBUyxDQUFDMkMsSUFSRTtBQVN0QnJDLElBQUFBLFFBQVEsRUFBRU4sU0FBUyxDQUFDMkMsSUFURTtBQVV0QnBDLElBQUFBLFFBQVEsRUFBRVAsU0FBUyxDQUFDMkMsSUFWRTtBQVd0Qm5DLElBQUFBLFNBQVMsRUFBRVIsU0FBUyxDQUFDMkMsSUFYQztBQVl0QmhDLElBQUFBLFFBQVEsRUFBRVgsU0FBUyxDQUFDNkM7QUFaRSxHQUF4QjtBQWNEOztBQUNELGVBQWU1QyxXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XHJcblxyXG5mdW5jdGlvbiBSYWRpb1dpZGdldChwcm9wcykge1xyXG4gIGNvbnN0IHtcclxuICAgIG9wdGlvbnMsXHJcbiAgICB2YWx1ZSxcclxuICAgIHJlcXVpcmVkLFxyXG4gICAgZGlzYWJsZWQsXHJcbiAgICByZWFkb25seSxcclxuICAgIGF1dG9mb2N1cyxcclxuICAgIG9uQmx1cixcclxuICAgIG9uRm9jdXMsXHJcbiAgICBvbkNoYW5nZSxcclxuICAgIGlkLFxyXG4gIH0gPSBwcm9wcztcclxuICAvLyBHZW5lcmF0aW5nIGEgdW5pcXVlIGZpZWxkIG5hbWUgdG8gaWRlbnRpZnkgdGhpcyBzZXQgb2YgcmFkaW8gYnV0dG9uc1xyXG4gIGNvbnN0IG5hbWUgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCk7XHJcbiAgY29uc3QgeyBlbnVtT3B0aW9ucywgZW51bURpc2FibGVkLCBpbmxpbmUgfSA9IG9wdGlvbnM7XHJcbiAgLy8gY2hlY2tlZD17Y2hlY2tlZH0gaGFzIGJlZW4gbW92ZWQgYWJvdmUgbmFtZT17bmFtZX0sIEFzIG1lbnRpb25lZCBpbiAjMzQ5O1xyXG4gIC8vIHRoaXMgaXMgYSB0ZW1wb3JhcnkgZml4IGZvciByYWRpbyBidXR0b24gcmVuZGVyaW5nIGJ1ZyBpbiBSZWFjdCwgZmFjZWJvb2svcmVhY3QjNzYzMC5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmaWVsZC1yYWRpby1ncm91cFwiIGlkPXtpZH0+XHJcbiAgICAgIHtlbnVtT3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSBvcHRpb24udmFsdWUgPT09IHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1EaXNhYmxlZCA9XHJcbiAgICAgICAgICBlbnVtRGlzYWJsZWQgJiYgZW51bURpc2FibGVkLmluZGV4T2Yob3B0aW9uLnZhbHVlKSAhPSAtMTtcclxuICAgICAgICBjb25zdCBkaXNhYmxlZENscyA9XHJcbiAgICAgICAgICBkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHkgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xyXG4gICAgICAgIGNvbnN0IHJhZGlvID0gKFxyXG4gICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXHJcbiAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cclxuICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxyXG4gICAgICAgICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cclxuICAgICAgICAgICAgICB2YWx1ZT17b3B0aW9uLnZhbHVlfVxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZCB8fCBpdGVtRGlzYWJsZWQgfHwgcmVhZG9ubHl9XHJcbiAgICAgICAgICAgICAgYXV0b0ZvY3VzPXthdXRvZm9jdXMgJiYgaSA9PT0gMH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17XyA9PiBvbkNoYW5nZShvcHRpb24udmFsdWUpfVxyXG4gICAgICAgICAgICAgIG9uQmx1cj17b25CbHVyICYmIChldmVudCA9PiBvbkJsdXIoaWQsIGV2ZW50LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICAgIG9uRm9jdXM9e29uRm9jdXMgJiYgKGV2ZW50ID0+IG9uRm9jdXMoaWQsIGV2ZW50LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8c3Bhbj57b3B0aW9uLmxhYmVsfTwvc3Bhbj5cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5saW5lID8gKFxyXG4gICAgICAgICAgPGxhYmVsIGtleT17aX0gY2xhc3NOYW1lPXtgcmFkaW8taW5saW5lICR7ZGlzYWJsZWRDbHN9YH0+XHJcbiAgICAgICAgICAgIHtyYWRpb31cclxuICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9e2ByYWRpbyAke2Rpc2FibGVkQ2xzfWB9PlxyXG4gICAgICAgICAgICA8bGFiZWw+e3JhZGlvfTwvbGFiZWw+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICB9KX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcblJhZGlvV2lkZ2V0LmRlZmF1bHRQcm9wcyA9IHtcclxuICBhdXRvZm9jdXM6IGZhbHNlLFxyXG59O1xyXG5cclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gIFJhZGlvV2lkZ2V0LnByb3BUeXBlcyA9IHtcclxuICAgIHNjaGVtYTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG4gICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcclxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XHJcbiAgICAgIGVudW1PcHRpb25zOiBQcm9wVHlwZXMuYXJyYXksXHJcbiAgICAgIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICB9KS5pc1JlcXVpcmVkLFxyXG4gICAgdmFsdWU6IFByb3BUeXBlcy5hbnksXHJcbiAgICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICByZWFkb25seTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBhdXRvZm9jdXM6IFByb3BUeXBlcy5ib29sLFxyXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gIH07XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUmFkaW9XaWRnZXQ7XHJcbiJdfQ==