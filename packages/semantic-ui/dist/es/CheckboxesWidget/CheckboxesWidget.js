function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types,react/no-array-index-key */
import React from "react";
import { Form } from "semantic-ui-react";
import { getSemanticProps } from "../util";
import TitleField from "../TitleField";

function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
}

function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
}

function CheckboxesWidget(props) {
  var id = props.id,
      disabled = props.disabled,
      options = props.options,
      value = props.value,
      autofocus = props.autofocus,
      readonly = props.readonly,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      formContext = props.formContext,
      schema = props.schema,
      uiSchema = props.uiSchema;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  var title = schema.title;
  var semanticProps = getSemanticProps({
    options: options,
    formContext: formContext,
    schema: schema,
    uiSchema: uiSchema,
    defaultSchemaProps: {
      inverted: false
    }
  });

  var _onChange = function _onChange(option) {
    return function (_ref) {
      var checked = _ref.target.checked;
      // eslint-disable-next-line no-shadow
      var all = enumOptions.map(function (_ref2) {
        var value = _ref2.value;
        return value;
      });

      if (checked) {
        onChange(selectValue(option.value, value, all));
      } else {
        onChange(deselectValue(option.value, value));
      }
    };
  };

  var _onBlur = function _onBlur() {
    return onBlur && onBlur(id, value);
  };

  var _onFocus = function _onFocus() {
    return onFocus && onFocus(id, value);
  };

  var inlineOption = inline ? {
    inline: true
  } : {
    grouped: true
  };
  return React.createElement(React.Fragment, null, title && React.createElement(TitleField, {
    title: title
  }), React.createElement(Form.Group, inlineOption, enumOptions.map(function (option, index) {
    var checked = value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) !== -1;
    return React.createElement(Form.Checkbox, _extends({
      id: "".concat(id, "_").concat(index),
      key: "".concat(id, "_").concat(index),
      label: option.label
    }, semanticProps, {
      checked: checked,
      disabled: disabled || itemDisabled || readonly,
      autoFocus: autofocus && index === 0,
      onChange: _onChange(option),
      onBlur: _onBlur,
      onFocus: _onFocus
    }));
  })));
}

export default CheckboxesWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,