function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */
import React from "react";
import { utils } from '@rjsf/core';
import _ from "lodash";
import { Form } from "semantic-ui-react";
import { getSemanticProps } from "../util";
var asNumber = utils.asNumber,
    guessType = utils.guessType;
var nums = new Set(["number", "integer"]);
/**
 * * Returns and creates an array format required for semantic drop down
 * @param {array} enumOptions- array of items for the dropdown
 * @param {array} enumDisabled - array of enum option values to disable
 * @returns {*}
 */

function createDefaultValueOptionsForDropDown(enumOptions, enumDisabled) {
  var disabledOptions = enumDisabled || [];
  var options = []; // eslint-disable-next-line no-shadow

  options = _.map(enumOptions, function (_ref) {
    var label = _ref.label,
        value = _ref.value;
    return {
      disabled: disabledOptions.indexOf(value) !== -1,
      key: label,
      text: label,
      value: value
    };
  });
  return options;
}
/**
 * This is a silly limitation in the DOM where option change event values are
 * always retrieved as strings.
 */


var processValue = function processValue(schema, value) {
  // "enum" is a reserved word, so only "type" and "items" can be destructured
  var type = schema.type,
      items = schema.items;

  if (value === "") {
    return undefined;
  } else if (type === "array" && items && nums.has(items.type)) {
    return value.map(asNumber);
  } else if (type === "boolean") {
    return value === "true" || value === true;
  } else if (type === "number") {
    return asNumber(value);
  } // If type is undefined, but an enum is present, try and infer the type from
  // the enum values


  if (schema.enum) {
    if (schema.enum.every(function (x) {
      return guessType(x) === "number";
    })) {
      return asNumber(value);
    } else if (schema.enum.every(function (x) {
      return guessType(x) === "boolean";
    })) {
      return value === "true";
    }
  }

  return value;
};

function SelectWidget(props) {
  var schema = props.schema,
      uiSchema = props.uiSchema,
      formContext = props.formContext,
      id = props.id,
      options = props.options,
      name = props.name,
      label = props.label,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      value = props.value,
      multiple = props.multiple,
      placeholder = props.placeholder,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus;
  var semanticProps = getSemanticProps({
    schema: schema,
    uiSchema: uiSchema,
    formContext: formContext,
    options: options,
    defaultSchemaProps: {
      inverted: "false",
      selection: true,
      fluid: true,
      scrolling: true,
      upward: false
    }
  });
  var enumDisabled = options.enumDisabled,
      enumOptions = options.enumOptions;
  var emptyValue = multiple ? [] : "";
  var dropdownOptions = createDefaultValueOptionsForDropDown(enumOptions, enumDisabled);

  var _onChange = function _onChange(event, // eslint-disable-next-line no-shadow
  _ref2) {
    var value = _ref2.value;
    return onChange && onChange(processValue(schema, value));
  }; // eslint-disable-next-line no-shadow


  var _onBlur = function _onBlur(_ref3) {
    var value = _ref3.target.value;
    return onBlur && onBlur(id, processValue(schema, value));
  };

  var _onFocus = function _onFocus(_ref4) {
    var value = _ref4.target.value;
    return onFocus && onFocus(id, processValue(schema, value));
  };

  return React.createElement(Form.Dropdown, _extends({
    key: id,
    name: name,
    label: label || schema.title,
    multiple: typeof multiple === "undefined" ? false : multiple,
    value: typeof value === "undefined" ? emptyValue : value,
    disabled: disabled,
    placeholder: placeholder
  }, semanticProps, {
    required: required,
    autoFocus: autofocus,
    readOnly: readonly,
    options: dropdownOptions,
    onChange: _onChange,
    onBlur: _onBlur,
    onFocus: _onFocus
  }));
}

export default SelectWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,