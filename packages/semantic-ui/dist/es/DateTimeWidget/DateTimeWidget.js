function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react/prop-types */
import React from "react";
import { utils } from "@rjsf/core";
import { getSemanticProps } from "../util";
import { Form } from "semantic-ui-react";
var localToUTC = utils.localToUTC,
    utcToLocal = utils.utcToLocal,
    getDisplayLabel = utils.getDisplayLabel;

function DateTimeWidget(props) {
  var id = props.id,
      required = props.required,
      readonly = props.readonly,
      disabled = props.disabled,
      name = props.name,
      label = props.label,
      schema = props.schema,
      uiSchema = props.uiSchema,
      value = props.value,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      autofocus = props.autofocus,
      options = props.options,
      formContext = props.formContext;
  var semanticProps = getSemanticProps({
    uiSchema: uiSchema,
    schema: schema,
    formContext: formContext,
    options: options
  });

  var _onChange = function _onChange(_ref) {
    var value = _ref.target.value;
    return onChange && onChange(localToUTC(value));
  };

  var _onBlur = function _onBlur() {
    return onBlur && onBlur(id, value);
  };

  var _onFocus = function _onFocus() {
    return onFocus && onFocus(id, value);
  };

  var dateValue = utcToLocal(value);
  var displayLabel = getDisplayLabel(schema, uiSchema
  /* TODO: , rootSchema */
  );
  return React.createElement(Form.Input, _extends({
    key: id,
    id: id,
    type: "datetime-local",
    label: displayLabel ? label || schema.title : false,
    required: required,
    autoFocus: autofocus,
    disabled: disabled || readonly,
    name: name
  }, semanticProps, {
    value: dateValue,
    onChange: _onChange,
    onBlur: _onBlur,
    onFocus: _onFocus
  }));
}

export default DateTimeWidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9EYXRlVGltZVdpZGdldC9EYXRlVGltZVdpZGdldC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInV0aWxzIiwiZ2V0U2VtYW50aWNQcm9wcyIsIkZvcm0iLCJsb2NhbFRvVVRDIiwidXRjVG9Mb2NhbCIsImdldERpc3BsYXlMYWJlbCIsIkRhdGVUaW1lV2lkZ2V0IiwicHJvcHMiLCJpZCIsInJlcXVpcmVkIiwicmVhZG9ubHkiLCJkaXNhYmxlZCIsIm5hbWUiLCJsYWJlbCIsInNjaGVtYSIsInVpU2NoZW1hIiwidmFsdWUiLCJvbkNoYW5nZSIsIm9uQmx1ciIsIm9uRm9jdXMiLCJhdXRvZm9jdXMiLCJvcHRpb25zIiwiZm9ybUNvbnRleHQiLCJzZW1hbnRpY1Byb3BzIiwiX29uQ2hhbmdlIiwidGFyZ2V0IiwiX29uQmx1ciIsIl9vbkZvY3VzIiwiZGF0ZVZhbHVlIiwiZGlzcGxheUxhYmVsIiwidGl0bGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FBU0MsS0FBVCxRQUFzQixZQUF0QjtBQUNBLFNBQVNDLGdCQUFULFFBQWlDLFNBQWpDO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixtQkFBckI7SUFFUUMsVSxHQUE0Q0gsSyxDQUE1Q0csVTtJQUFZQyxVLEdBQWdDSixLLENBQWhDSSxVO0lBQVlDLGUsR0FBb0JMLEssQ0FBcEJLLGU7O0FBRWhDLFNBQVNDLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQUEsTUFFN0JDLEVBRjZCLEdBaUJ6QkQsS0FqQnlCLENBRTdCQyxFQUY2QjtBQUFBLE1BRzdCQyxRQUg2QixHQWlCekJGLEtBakJ5QixDQUc3QkUsUUFINkI7QUFBQSxNQUk3QkMsUUFKNkIsR0FpQnpCSCxLQWpCeUIsQ0FJN0JHLFFBSjZCO0FBQUEsTUFLN0JDLFFBTDZCLEdBaUJ6QkosS0FqQnlCLENBSzdCSSxRQUw2QjtBQUFBLE1BTTdCQyxJQU42QixHQWlCekJMLEtBakJ5QixDQU03QkssSUFONkI7QUFBQSxNQU83QkMsS0FQNkIsR0FpQnpCTixLQWpCeUIsQ0FPN0JNLEtBUDZCO0FBQUEsTUFRN0JDLE1BUjZCLEdBaUJ6QlAsS0FqQnlCLENBUTdCTyxNQVI2QjtBQUFBLE1BUzdCQyxRQVQ2QixHQWlCekJSLEtBakJ5QixDQVM3QlEsUUFUNkI7QUFBQSxNQVU3QkMsS0FWNkIsR0FpQnpCVCxLQWpCeUIsQ0FVN0JTLEtBVjZCO0FBQUEsTUFXN0JDLFFBWDZCLEdBaUJ6QlYsS0FqQnlCLENBVzdCVSxRQVg2QjtBQUFBLE1BWTdCQyxNQVo2QixHQWlCekJYLEtBakJ5QixDQVk3QlcsTUFaNkI7QUFBQSxNQWE3QkMsT0FiNkIsR0FpQnpCWixLQWpCeUIsQ0FhN0JZLE9BYjZCO0FBQUEsTUFjN0JDLFNBZDZCLEdBaUJ6QmIsS0FqQnlCLENBYzdCYSxTQWQ2QjtBQUFBLE1BZTdCQyxPQWY2QixHQWlCekJkLEtBakJ5QixDQWU3QmMsT0FmNkI7QUFBQSxNQWdCN0JDLFdBaEI2QixHQWlCekJmLEtBakJ5QixDQWdCN0JlLFdBaEI2QjtBQWtCN0IsTUFBTUMsYUFBYSxHQUFHdEIsZ0JBQWdCLENBQUM7QUFDckNjLElBQUFBLFFBQVEsRUFBUkEsUUFEcUM7QUFFckNELElBQUFBLE1BQU0sRUFBTkEsTUFGcUM7QUFHckNRLElBQUFBLFdBQVcsRUFBWEEsV0FIcUM7QUFJckNELElBQUFBLE9BQU8sRUFBUEE7QUFKcUMsR0FBRCxDQUF0Qzs7QUFNQSxNQUFNRyxTQUFTLEdBQUcsU0FBWkEsU0FBWTtBQUFBLFFBQWFSLEtBQWIsUUFBR1MsTUFBSCxDQUFhVCxLQUFiO0FBQUEsV0FBMkJDLFFBQVEsSUFBSUEsUUFBUSxDQUFDZCxVQUFVLENBQUNhLEtBQUQsQ0FBWCxDQUEvQztBQUFBLEdBQWxCOztBQUNBLE1BQU1VLE9BQU8sR0FBRyxTQUFWQSxPQUFVO0FBQUEsV0FBTVIsTUFBTSxJQUFJQSxNQUFNLENBQUNWLEVBQUQsRUFBS1EsS0FBTCxDQUF0QjtBQUFBLEdBQWhCOztBQUNBLE1BQU1XLFFBQVEsR0FBRyxTQUFYQSxRQUFXO0FBQUEsV0FBTVIsT0FBTyxJQUFJQSxPQUFPLENBQUNYLEVBQUQsRUFBS1EsS0FBTCxDQUF4QjtBQUFBLEdBQWpCOztBQUNBLE1BQU1ZLFNBQVMsR0FBR3hCLFVBQVUsQ0FBQ1ksS0FBRCxDQUE1QjtBQUNBLE1BQU1hLFlBQVksR0FBR3hCLGVBQWUsQ0FDbENTLE1BRGtDLEVBRWxDQztBQUNBO0FBSGtDLEdBQXBDO0FBS0EsU0FDRSxvQkFBQyxJQUFELENBQU0sS0FBTjtBQUNBLElBQUEsR0FBRyxFQUFFUCxFQURMO0FBRUEsSUFBQSxFQUFFLEVBQUVBLEVBRko7QUFHQSxJQUFBLElBQUksRUFBQyxnQkFITDtBQUlBLElBQUEsS0FBSyxFQUFFcUIsWUFBWSxHQUFHaEIsS0FBSyxJQUFJQyxNQUFNLENBQUNnQixLQUFuQixHQUEyQixLQUo5QztBQUtBLElBQUEsUUFBUSxFQUFFckIsUUFMVjtBQU1BLElBQUEsU0FBUyxFQUFFVyxTQU5YO0FBT0EsSUFBQSxRQUFRLEVBQUVULFFBQVEsSUFBSUQsUUFQdEI7QUFRQSxJQUFBLElBQUksRUFBRUU7QUFSTixLQVNJVyxhQVRKO0FBVUEsSUFBQSxLQUFLLEVBQUVLLFNBVlA7QUFXQSxJQUFBLFFBQVEsRUFBRUosU0FYVjtBQVlBLElBQUEsTUFBTSxFQUFFRSxPQVpSO0FBYUEsSUFBQSxPQUFPLEVBQUVDO0FBYlQsS0FERjtBQWlCRDs7QUFDRCxlQUFlckIsY0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1dGlscyB9IGZyb20gXCJAcmpzZi9jb3JlXCI7XHJcbmltcG9ydCB7IGdldFNlbWFudGljUHJvcHMgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcInNlbWFudGljLXVpLXJlYWN0XCI7XHJcblxyXG5jb25zdCB7IGxvY2FsVG9VVEMsIHV0Y1RvTG9jYWwsIGdldERpc3BsYXlMYWJlbCB9ID0gdXRpbHM7XHJcblxyXG5mdW5jdGlvbiBEYXRlVGltZVdpZGdldChwcm9wcykge1xyXG4gIGNvbnN0IHtcclxuICBpZCxcclxuICByZXF1aXJlZCxcclxuICByZWFkb25seSxcclxuICBkaXNhYmxlZCxcclxuICBuYW1lLFxyXG4gIGxhYmVsLFxyXG4gIHNjaGVtYSxcclxuICB1aVNjaGVtYSxcclxuICB2YWx1ZSxcclxuICBvbkNoYW5nZSxcclxuICBvbkJsdXIsXHJcbiAgb25Gb2N1cyxcclxuICBhdXRvZm9jdXMsXHJcbiAgb3B0aW9ucyxcclxuICBmb3JtQ29udGV4dCxcclxuICB9ID0gcHJvcHM7XHJcbiAgY29uc3Qgc2VtYW50aWNQcm9wcyA9IGdldFNlbWFudGljUHJvcHMoe1xyXG4gICAgdWlTY2hlbWEsXHJcbiAgICBzY2hlbWEsXHJcbiAgICBmb3JtQ29udGV4dCxcclxuICAgIG9wdGlvbnMsXHJcbiAgfSk7XHJcbiAgY29uc3QgX29uQ2hhbmdlID0gKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4gb25DaGFuZ2UgJiYgb25DaGFuZ2UobG9jYWxUb1VUQyh2YWx1ZSkpO1xyXG4gIGNvbnN0IF9vbkJsdXIgPSAoKSA9PiBvbkJsdXIgJiYgb25CbHVyKGlkLCB2YWx1ZSk7XHJcbiAgY29uc3QgX29uRm9jdXMgPSAoKSA9PiBvbkZvY3VzICYmIG9uRm9jdXMoaWQsIHZhbHVlKTtcclxuICBjb25zdCBkYXRlVmFsdWUgPSB1dGNUb0xvY2FsKHZhbHVlKTtcclxuICBjb25zdCBkaXNwbGF5TGFiZWwgPSBnZXREaXNwbGF5TGFiZWwoXHJcbiAgICBzY2hlbWEsXHJcbiAgICB1aVNjaGVtYVxyXG4gICAgLyogVE9ETzogLCByb290U2NoZW1hICovXHJcbiAgKTtcclxuICByZXR1cm4gKFxyXG4gICAgPEZvcm0uSW5wdXRcclxuICAgIGtleT17aWR9XHJcbiAgICBpZD17aWR9XHJcbiAgICB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIlxyXG4gICAgbGFiZWw9e2Rpc3BsYXlMYWJlbCA/IGxhYmVsIHx8IHNjaGVtYS50aXRsZSA6IGZhbHNlfVxyXG4gICAgcmVxdWlyZWQ9e3JlcXVpcmVkfVxyXG4gICAgYXV0b0ZvY3VzPXthdXRvZm9jdXN9XHJcbiAgICBkaXNhYmxlZD17ZGlzYWJsZWQgfHwgcmVhZG9ubHl9XHJcbiAgICBuYW1lPXtuYW1lfVxyXG4gICAgey4uLnNlbWFudGljUHJvcHN9XHJcbiAgICB2YWx1ZT17ZGF0ZVZhbHVlfVxyXG4gICAgb25DaGFuZ2U9e19vbkNoYW5nZX1cclxuICAgIG9uQmx1cj17X29uQmx1cn1cclxuICAgIG9uRm9jdXM9e19vbkZvY3VzfVxyXG4gIC8+XHJcbiAgKTtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZVdpZGdldDtcclxuIl19