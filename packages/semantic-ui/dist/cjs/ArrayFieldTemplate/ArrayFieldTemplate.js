"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _semanticUiReact = require("semantic-ui-react");

var _core = require("@rjsf/core");

var _AddButton = _interopRequireDefault(require("../AddButton"));

var _util = require("../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isFixedItems = _core.utils.isFixedItems;

var ArrayFieldTitle = function ArrayFieldTitle(_ref) {
  var TitleField = _ref.TitleField,
      idSchema = _ref.idSchema,
      uiSchema = _ref.uiSchema,
      title = _ref.title;

  if (!title) {
    return null;
  }

  var id = "".concat(idSchema.$id, "__title");
  return _react.default.createElement(TitleField, {
    id: id,
    title: title,
    options: uiSchema["ui:options"]
  });
};

function ArrayFieldDescription(_ref2) {
  var DescriptionField = _ref2.DescriptionField,
      idSchema = _ref2.idSchema,
      description = _ref2.description;

  if (!description) {
    // See #312: Ensure compatibility with old versions of React.
    return null;
  }

  var id = "".concat(idSchema.$id, "__description");
  return _react.default.createElement(DescriptionField, {
    id: id,
    description: description
  });
}

var gridStyle = function gridStyle(vertical) {
  return {
    display: "grid",
    gridTemplateColumns: "1fr ".concat(vertical ? 65 : 110, "px")
  };
}; // checks if its the first array item


function isInitialArrayItem(props) {
  // no underscore because im not sure if we want to import a library here
  var idSchema = props.children.props.idSchema;
  return idSchema.target && idSchema.conditions;
} // Used in the two templates


function DefaultArrayItem(props) {
  return _react.default.createElement("div", {
    className: "array-item",
    key: props.key
  }, _react.default.createElement(_util.MaybeWrap, {
    wrap: props.wrapItem,
    component: _semanticUiReact.Segment
  }, _react.default.createElement(_semanticUiReact.Grid, {
    style: !isInitialArrayItem(props) ? _objectSpread(_objectSpread({}, gridStyle(!props.horizontalButtons)), {}, {
      alignItems: "center"
    }) : gridStyle(!props.horizontalButtons)
  }, _react.default.createElement(_semanticUiReact.Grid.Column, {
    width: 16,
    verticalAlign: "middle"
  }, props.children), props.hasToolbar && _react.default.createElement(_semanticUiReact.Grid.Column, null, (props.hasMoveUp || props.hasMoveDown || props.hasRemove) && _react.default.createElement(_semanticUiReact.Button.Group, {
    size: "mini",
    vertical: !props.horizontalButtons
  }, (props.hasMoveUp || props.hasMoveDown) && _react.default.createElement(_semanticUiReact.Button, {
    icon: "angle up",
    className: "array-item-move-up",
    tabIndex: "-1",
    disabled: props.disabled || props.readOnly || !props.hasMoveUp,
    onClick: props.onReorderClick(props.index, props.index - 1)
  }), (props.hasMoveUp || props.hasMoveDown) && _react.default.createElement(_semanticUiReact.Button, {
    icon: "angle down",
    className: "array-item-move-down",
    tabIndex: "-1",
    disabled: props.disabled || props.readOnly || !props.hasMoveDown,
    onClick: props.onReorderClick(props.index, props.index + 1)
  }), props.hasRemove && _react.default.createElement(_semanticUiReact.Button, {
    icon: "trash",
    className: "array-item-remove",
    tabIndex: "-1",
    disabled: props.disabled || props.readOnly,
    onClick: props.onDropIndexClick(props.index)
  }))))));
} // Used for arrays that are represented as multiple selection fields
// (displayed as a multi select or checkboxes)


function DefaultFixedArrayFieldTemplate(_ref3) {
  var uiSchema = _ref3.uiSchema,
      idSchema = _ref3.idSchema,
      canAdd = _ref3.canAdd,
      className = _ref3.className,
      classNames = _ref3.classNames,
      disabled = _ref3.disabled,
      items = _ref3.items,
      onAddClick = _ref3.onAddClick,
      readOnly = _ref3.readOnly,
      required = _ref3.required,
      schema = _ref3.schema,
      title = _ref3.title,
      TitleField = _ref3.TitleField,
      itemProps = _ref3.itemProps;
  var fieldTitle = uiSchema["ui:title"] || title;
  var fieldDescription = uiSchema["ui:description"] || schema.description;
  return _react.default.createElement("div", {
    className: (0, _util.cleanClassNames)([className, classNames])
  }, _react.default.createElement(ArrayFieldTitle, {
    key: "array-field-title-".concat(idSchema.$id),
    TitleField: TitleField,
    idSchema: idSchema,
    uiSchema: uiSchema,
    title: fieldTitle,
    required: required
  }), fieldDescription && _react.default.createElement("div", {
    className: "field-description",
    key: "field-description-".concat(idSchema.$id)
  }, fieldDescription), _react.default.createElement("div", {
    key: "array-item-list-".concat(idSchema.$id)
  }, _react.default.createElement("div", {
    className: "row array-item-list"
  }, items && items.map(function (p) {
    return DefaultArrayItem(_objectSpread(_objectSpread({}, p), itemProps));
  })), canAdd && _react.default.createElement("div", {
    style: {
      marginTop: "1rem",
      position: "relative",
      textAlign: "right"
    }
  }, _react.default.createElement(_AddButton.default, {
    onClick: onAddClick,
    disabled: disabled || readOnly
  }))));
}

function DefaultNormalArrayFieldTemplate(_ref4) {
  var uiSchema = _ref4.uiSchema,
      idSchema = _ref4.idSchema,
      canAdd = _ref4.canAdd,
      className = _ref4.className,
      classNames = _ref4.classNames,
      disabled = _ref4.disabled,
      DescriptionField = _ref4.DescriptionField,
      items = _ref4.items,
      onAddClick = _ref4.onAddClick,
      readOnly = _ref4.readOnly,
      required = _ref4.required,
      schema = _ref4.schema,
      title = _ref4.title,
      TitleField = _ref4.TitleField,
      itemProps = _ref4.itemProps;
  var fieldTitle = uiSchema["ui:title"] || title;
  var fieldDescription = uiSchema["ui:description"] || schema.description;
  return _react.default.createElement("div", {
    className: (0, _util.cleanClassNames)([className, classNames, "sortable-form-fields"])
  }, _react.default.createElement(ArrayFieldTitle, {
    key: "array-field-title-".concat(idSchema.$id),
    TitleField: TitleField,
    idSchema: idSchema,
    uiSchema: uiSchema,
    title: fieldTitle,
    required: required
  }), fieldDescription && _react.default.createElement(ArrayFieldDescription, {
    key: "array-field-description-".concat(idSchema.$id),
    DescriptionField: DescriptionField,
    idSchema: idSchema,
    description: fieldDescription
  }), _react.default.createElement("div", {
    key: "array-item-list-".concat(idSchema.$id)
  }, _react.default.createElement("div", {
    className: "row array-item-list"
  }, items && items.map(function (p) {
    return DefaultArrayItem(_objectSpread(_objectSpread({}, p), itemProps));
  })), canAdd && _react.default.createElement("div", {
    style: {
      marginTop: "1rem",
      position: "relative",
      textAlign: "right"
    }
  }, _react.default.createElement(_AddButton.default, {
    onClick: onAddClick,
    disabled: disabled || readOnly
  }))));
}

function ArrayFieldTemplate(props) {
  var options = props.options,
      schema = props.schema,
      uiSchema = props.uiSchema,
      formContext = props.formContext;
  var semanticProps = (0, _util.getSemanticProps)({
    options: options,
    uiSchema: uiSchema,
    formContext: formContext,
    defaultSchemaProps: {
      horizontalButtons: false,
      wrapItem: false
    }
  });
  var horizontalButtons = semanticProps.horizontalButtons,
      wrapItem = semanticProps.wrapItem;
  var itemProps = {
    horizontalButtons: horizontalButtons,
    wrapItem: wrapItem
  };

  if (isFixedItems(schema)) {
    return _react.default.createElement(DefaultFixedArrayFieldTemplate, _extends({}, props, {
      itemProps: itemProps
    }));
  }

  return _react.default.createElement(DefaultNormalArrayFieldTemplate, _extends({}, props, {
    itemProps: itemProps
  }));
}

var _default = ArrayFieldTemplate;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,